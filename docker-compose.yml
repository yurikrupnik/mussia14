version: '3'

networks:
  monitor-net:
    driver: bridge
  elastic:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.0.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.5.0-6.2.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.0.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.0.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.0.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.0.0
    container_name: ksqldb-cli
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  ksql-datagen:
    image: confluentinc/ksqldb-examples:7.0.0
    hostname: ksql-datagen
    container_name: ksql-datagen
    depends_on:
      - ksqldb-server
      - broker
      - schema-registry
      - connect
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                      cub kafka-ready -b broker:29092 1 40 && \
                      echo Waiting for Confluent Schema Registry to be ready... && \
                      cub sr-ready schema-registry 8081 40 && \
                      echo Waiting a few seconds for topic creation to finish... && \
                      sleep 11 && \
                      tail -f /dev/null'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      STREAMS_BOOTSTRAP_SERVERS: broker:29092
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 8081

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.0.0
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  prometheus:
    image: prom/prometheus
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - 9100:9100
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    restart: always
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: '472'
    restart: always
    environment:
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    ports:
      - 3000:3000
    depends_on:
      - prometheus

#  pka:
#    image: yurikrupnik/prometheus-kafka-adapter
#    container_name: prometheus-kafka-adapter
#    build:
#      context: prometheus-kafka-adapter
#    depends_on:
#      - prometheus
#      - kafka
#    ports:
#      - '9200:9200'


  db:
    image: mongo
    ports:
      - 27017:27017
#    networks:
#      - backend

#  api:
#    image: europe-west1-docker.pkg.dev/mussia14/images/api
#    build:
#      context: apps/fullstack/api
#      dockerfile: Dockerfile
#    container_name: api
#    environment:
#      - FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCNOOxKKTQnEzLvm+adDn475SH3ujfcTIGhFvjKQP6MOauR6yDKsxpMXoF8TbTir2qzdM9Au/55dstN/pw5tmR+6hNCnDKlxPtG2T/9igMWOMIV7oyIGVCx3x+13TpY/HCFP7KoB4TKJK+XA0rg0PUhwFlYSd07L1cCuOKYsBgnLeT1ldYOnYTFJOkUVJvJCLr9SjeCCdY0/7oiXwAkqZ9iLQrkAumyjqqPkbcBHNj1QxLdSCSQBbm4dpl0s5WLH4TrEBYR6H2uoXJtSjmG1DtpOwMhRSyM1WRg1yBa3AeFnLzxU0MJHSUPP8aX6yYPfXwFQbLnpDKkd9Pui8PdveWvAgMBAAECggEAKGl7pJU56VyjHNIeIh99nCIroDpXteDmz3RFaYtDzFjMcgs47QhnpCb/ItURyDSucgAhNsMVRSjrcLxFdHZvN6pALLWKAMnnphSRLTqLO5auY5xJ9sBXyS6yYlaWVdSXVmot88uDAl2RKcO1b7QcEbZ7Wrp4ZnFbktnZbhwmLT+WDG4gBUmJa/frlUBMGY7uUAGZCzRimrbmZxTzpTHfy9g4wsRFkmQGxhz8fVTmkuJiB5XAOlSxiedX9e5rvmAIPszKiegWpspVYH8VQ8pa6/UXP5aFrPgrr5XcKsMcDZ1KyR05TWCEEaa28L0PRCgII6UOxuei3mf/PvG8l0drAQKBgQC/d92izijKwbMaReArWkXfZeedPEnK9HS9dram3Q1EHLmRSw1cORyJfAA3E3AvU6+8nx1OTyQI9UEWnkhT3z18wUpuc0B0YJEKeUp4ZWn/RZ6J9Quo5ZvixcfI7PU1YeRtOQeobbip3NW0TtFbCsX0kZV/nliWrsnI9/svwKSjQQKBgQC80cbFz4u0SXrutIVK7Fu3ipwOey+LD0WLsyyVh9swhaKWhdyfUfJtYWEIUa+OzB/egHTvGJmsMfTdUoz6PdYXy5Htvv/UB2xhXL8ABQ35xDjPDUvC44/EmvT458FTXzCs5GLUzd/OhE5hWzOCp5N17draClV+xkYWAdObxXZ87wKBgA+JZHy/iePaD/SD0wrxilX0aPUDXWGQsKBnL68epOLwCcbWdkETiVNGsqXFeAb/HXWK28/s8Bmh/SQet/PGW7Dx5l5MD+DhrSNScE6QvCcwuQqszcNozlt6fRm60LMCPIz4YbyzGpb+CoFVG/vtRd7wqVbvvHSNvmYGaWWYlkOBAoGAFm3w58SMuuDTqpFlGA5VosrjWNEHR8SLpVmmXSjjP7NQKgNCvuY0HwwnQ564dQUIcBzgRxqr/ol8peHNf1hjGzaCYjSDHUO4eyRSSAVRsK6/dNEGg+MWS+uAWCTnkSjIlnEW0GKYSGbtDKGRz95qJOMZUTdTCpkw8CJNab6eIZ8CgYAu01SkhcsyxP+gcElwZVeCVSprkbbgJ+/JBtS+tSyGB/xaF22qzaVn+nDxiWzvZMzXq+SBumaROyZpOgAhCoaaRjqwXUb/IRnVwN3c9BXvyqq6X6vlCVyRO6cRT09FbDxPPJIiaHRaBXBDuskUK3coCbR66v9JqKU8zHqbmrvvSQ==-----END PRIVATE KEY-----"
#      - FIREBASE_CLIENT_EMAIL=firebase-adminsdk-l15ce@mussia14.iam.gserviceaccount.com
#      - FIREBASE_DATABASE_URL=https://mussia8-default-rtdb.europe-west1.firebasedatabase.app
#      - MONGO_URI=mongodb://db/mussia12
#      - PORT=3333
#      - PROJECT_ID=mussia14
#    ports:
#      - 3333:3333
##    networks:
##      - backend
##    links:
##      - "db:database"
#    depends_on:
#      - db
#


#  node-exporter:
#    image: prom/node-exporter:latest
#    container_name: node-exporter
#    restart: unless-stopped
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#    command:
#      - '--path.procfs=/host/proc'
#      - '--path.rootfs=/rootfs'
#      - '--path.sysfs=/host/sys'
#      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
#    expose:
#      - 9100

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    restart: unless-stopped
#    volumes:
#      - ./prometheus.yml:/etc/prometheus/prometheus.yml
#      - prometheus_data:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#      - '--web.console.libraries=/etc/prometheus/console_libraries'
#      - '--web.console.templates=/etc/prometheus/consoles'
#      - '--web.enable-lifecycle'
#    ports:
#      - 9090:9090
#    expose:
#      - 9090
#  bi-service:
##    image: eu.gcr.io/mussia8/bi-service
#    image: yurikrupni/bi-service
#    build:
#      context: apps/big-data/bi-service
#      dockerfile: Dockerfile
#    container_name: bi-service
#    environment:
#      - MONGO_URI=mongodb://db/mussia8
#      #      - MONGO_URI="$$(shell gcloud secrets versions access latest --secret=MONGO_URI --project=mussia8)"
#      #      - MONGO_URI=$MONGO_URI
##      - PORT=3335
#    ports:
#      - 3000:3333
#
#    healthcheck:
#      test: [ 'CMD', 'curl', '-f', 'http://bi-service/apis/health' ]
#      interval: 30s
#      timeout: 30s
#      retries: 5
#
#    networks:
#      - backend
#    depends_on:
#      - db
  #  db1:
  #    image: mongo
  #    ports:
  #      - 27018:27017
  #  users-db:
  #    image: mongo
  #    ports:
  #      - 27019:27017
  #  users-api:
  #    image: eu.gcr.io/mussia8/users-api
  #    build:
  #      context: apps/fullstack/users-api
  #      dockerfile: Dockerfile
  #    container_name: users-api
  #    environment:
  #      - DB_URL=mongodb://db/mussia8
  #      - PORT=3333
  #    ports:
  #      - 3333:3333
  #  projects-api:
  #    image: eu.gcr.io/mussia8/projects-api
  #    build:
  #      context: apps/fullstack/projects-api
  #      dockerfile: Dockerfile
  #    container_name: projects-api
  #    environment:
  #      - DB_URL=mongodb://db/mussia8
  #      - PORT=3334
  #    ports:
  #      - 3334:3334
  #  go-api:
  #    image: eu.gcr.io/mussia8/go-api
  #    build:
  #      context: apps/core/go-api
  #      dockerfile: Dockerfile
  #    container_name: go-api
  #    environment:
  #      - MONGO_URI=mongodb://db/mussia8
  #      - PORT=3000
  #    ports:
  #      - 3001:3000
  #    depends_on:
  #      - db

  #  event1:
  #    image: eu.gcr.io/mussia8/event1
  #    build:
  #      context: apps/fullstack/event1
  #      dockerfile: Dockerfile
  #    container_name: event1
  #    environment:
  #      - MONGO_URI=mongodb://db1/event1
  #      - PORT=3336
  #    ports:
  #      - 3336:3336
  #    depends_on:
  #      - db1
  #  event2:
  #    image: eu.gcr.io/mussia8/event2
  #    build:
  #      context: apps/fullstack/event2
  #      dockerfile: Dockerfile
  #    container_name: event2
  #    environment:
  #      - MONGO_URI=mongodb://db/event2
  #      - PORT=3337
  #    ports:
  #      - 3337:3337
  #    depends_on:
  #      - db
  #  event3:
  #    image: eu.gcr.io/mussia8/event3
  #    build:
  #      context: apps/fullstack/event3
  #      dockerfile: Dockerfile
  #    container_name: event2
  #    environment:
  #      - MONGO_URI=mongodb://db/event3
  #      - PORT=3338
  #    ports:
  #      - 3338:3338
  #    depends_on:
  #      - db
  #  #    command: npm run start
  #  users:
  #    image: eu.gcr.io/mussia8/users
  #    build:
  #      context: apps/fullstack/users
  #      dockerfile: Dockerfile
  #    container_name: users
  #    environment:
  #      - MONGO_URI=mongodb://db/mussia8
  #      - PORT=3339
  #    ports:
  #      - 3339:3339
  #    depends_on:
  #      - db


